In order to test your code, modularize it.
Test frequently to avoid regressions

A single test case checks some specific functionality

A normal test case looks like this

------------------------------------------
TEST(Function_youare_testing, Test_Name){
    <conduct test here>
}
------------------------------------------

Test cases can be EXPECT_ or ASSERT_

EXPECT_ is non-fatal, this means that it won't interrupt the program
ASSERT_ is fatal. It can interrupt the program

Import Assertions that can be done in the test cases:

Fatal assertion	     ;    Nonfatal assertion;   	Verifies|
------------------------------------------------------------|
ASSERT_EQ(val1,val2);	EXPECT_EQ(val1,val2);	val1 == val2|
ASSERT_NE(val1,val2);	EXPECT_NE(val1,val2);	val1 != val2|
ASSERT_LT(val1,val2);	EXPECT_LT(val1,val2);	val1 < val2|
ASSERT_LE(val1,val2);	EXPECT_LE(val1,val2);	val1 <= val2|
ASSERT_GT(val1,val2);	EXPECT_GT(val1,val2);	val1 > val2|
ASSERT_GE(val1,val2);	EXPECT_GE(val1,val2);	val1 >= val2|
------------------------------------------------------------|

Fatal assertion	     ;    Nonfatal assertion;   	Verifies|
------------------------------------------------------------|
ASSERT_STREQ(str1,str2);	EXPECT_STREQ(str1,_str_2);	the two C strings have the same content
ASSERT_STRNE(str1,str2);	EXPECT_STRNE(str1,str2);	the two C strings have different content
ASSERT_STRCASEEQ(str1,str2);	EXPECT_STRCASEEQ(str1,str2);	the two C strings have the same content, ignoring case
ASSERT_STRCASENE(str1,str2);	EXPECT_STRCASENE(str1,str2);	the two C strings have different content, ignoring case
------------------------------------------------------------|
